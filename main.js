!function(e){var t={};function i(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(s,r,function(t){return e[t]}.bind(null,r));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}([function(e,t,i){i(1),e.exports=i(2)},function(e,t){!function(e){new e({el:"#app",data:()=>({timer:800,level:0,score:0,flopTimes:0,isPlayingMode:!1,cardSetting:{colors:["blue","green","pink","yellow"],shapes:["diamond","oval","rectangle","triangle"]},levelSetting:[{shape:2,color:1,quantity:12},{shape:1,color:2,quantity:12},{shape:2,color:1,quantity:12},{shape:1,color:2,quantity:12},{shape:3,color:2,quantity:12},{shape:2,color:3,quantity:12},{shape:3,color:2,quantity:12},{shape:2,color:3,quantity:12},{shape:4,color:4,quantity:12},{shape:4,color:4,quantity:12}],notifications:[2],currentSelectedCards:[],answerCardList:[...Array(12)].fill({url:"diamond-blue.svg",shape:"",card:"",isSelected:!1,isFoundPairs:!1,isEnabled:!1})}),computed:{lessTimer(){return this.timer-200},moreTimer(){return 4*this.timer},currentLevelSetting(){return this.levelSetting[parseInt(this.level)-1]},foundPairsQuantity(){return this.answerCardList.filter(({isFoundPairs:e})=>e).length},isFinishCurrentLevel(){return this.foundPairsQuantity==this.answerCardList.length},isFinishAllLevel:{get(){return 10==this.level&&this.isFinishCurrentLevel},set(){this.replayGame()}},displayLevel(){return this.level.toString().padStart(3,0)},displayScore(){return this.score.toString().padStart(3,0)},displayNameOfButton(){return this.isPlayingMode?"Replay":"Start"}},methods:{triggerGame(){this.isFinishAllLevel||this.isPlayingMode?this.isFinishAllLevel=!1:this.playGame()},playGame(){this.level+=1,this.setAnswerOfLevel(),setTimeout(()=>{this.foldBackCard(!0),setTimeout(()=>this.foldBackCard(),this.moreTimer),setTimeout(()=>this.isPlayingMode=!0,this.lessTimer)},this.lessTimer)},stopGame(){this.level=0,this.flop=0,this.score=0,this.isPlayingMode=!1,this.foldBackCard()},replayGame(){this.stopGame(),setTimeout(()=>this.playGame(),this.timer)},pickCardUp(e){if(this.isPlayingMode){this.multiplyClickDetector(e);let t=this.answerCardList[e];const{isEnabled:i,isSelected:s,isFoundPairs:r}=t;!i||s||r||(this.flopTimes+=1,t.isSelected=!0,this.currentSelectedCards.push({...t,index:e}),this.foundPairsDetector())}},multiplyClickDetector(e){const t=this.answerCardList[e];t.isFoundPairs||(t.isEnabled=!0,setTimeout(()=>t.isEnabled=!1,this.timer))},foundPairsDetector(){const e=this.currentSelectedCards.length;e>1&&(e>2?(this.selectedCardDetector(),this.currentSelectedCards=[]):(this.scoreCalculator(),setTimeout(()=>this.currentSelectedCards=[],this.timer)))},scoreCalculator(){let e=!1;const t=this.currentSelectedCards[0],i=this.currentSelectedCards[1];(e=t.color==i.color&&t.shape==i.shape)&&this.notificationsAndScoreSetter(2),this.attributeOfSelectedCardSetter(e)},attributeOfSelectedCardSetter(e){const t=e?"isFoundPairs":"isSelected";this.currentSelectedCards.forEach(({index:i})=>{setTimeout(()=>this.answerCardList[i][t]=e,e?0:this.lessTimer)}),setTimeout(()=>{this.isFinishCurrentLevel&&this.levelCalculator()},this.timer)},selectedCardDetector(){this.answerCardList.forEach(e=>{e.isFoundPairs||(e.isSelected=!1)})},foldBackCard(e=!1){this.answerCardList.forEach(t=>t.isSelected=e)},levelCalculator(){this.isPlayingMode=!1,setTimeout(()=>this.bonusCalculator(),this.lessTimer),this.isFinishAllLevel||(setTimeout(()=>this.foldBackCard(),this.moreTimer/2),setTimeout(()=>this.triggerGame(),this.moreTimer))},bonusCalculator(){const e=this.answerCardList.length;this.notificationsAndScoreSetter(this.flopTimes==e?5:this.flopTimes<1.5*e?3:1),this.flopTimes=0},notificationsAndScoreSetter(e){this.notifications.push(e),this.score+=e,setTimeout(()=>this.notifications.shift(),this.timer)},setAnswerOfLevel(){const e=this.setCardGroup(this.currentLevelSetting),t=this.setAnswerCardGroup(e,this.currentLevelSetting);this.answerCardList=this.setAnswerCardList(t,this.currentLevelSetting)},setCardGroup({color:e,shape:t}){const i=this.getMaterialList(this.cardSetting.colors,e),s=this.getMaterialList(this.cardSetting.shapes,t);let r=[];return i.forEach(e=>s.forEach(t=>r.push({url:`${t}-${e}.svg`,shape:t,color:e,isSelected:!1,isFoundPairs:!1,isEnabled:!1}))),r},setAnswerCardGroup(e,{quantity:t}){return this.getShuffleArray(e.length,t/2).map(t=>e[t])},setAnswerCardList(e,{quantity:t}){const i=this.getFilledArray(t,e);return this.getShuffleArray(t,t).map(e=>({...i[e]}))},getFilledArray:(e,t)=>[...Array(e)].map((e,i)=>t[i%t.length]),getMaterialList(e,t){return this.getShuffleArray(4,t).map(t=>e[t])},getShuffleArray:(e,t)=>[...Array(e).keys()].sort(()=>.5-Math.random()).slice(0,t)}})}(Vue)},function(e,t,i){}]);