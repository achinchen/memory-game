!function(t){var e={};function i(r){if(e[r])return e[r].exports;var s=e[r]={i:r,l:!1,exports:{}};return t[r].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(r,s,function(e){return t[e]}.bind(null,s));return r},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){i(1),t.exports=i(2)},function(t,e){!function(t){new t({el:"#app",data:()=>({timer:800,level:9,score:0,flopTimes:0,isPlayingMode:!1,cardSetting:{colors:["blue","green","pink","yellow"],shapes:["diamond","oval","rectangle","triangle"]},levelSetting:[{shape:2,color:1,quantity:12},{shape:1,color:2,quantity:12},{shape:2,color:1,quantity:12},{shape:1,color:2,quantity:12},{shape:3,color:2,quantity:12},{shape:2,color:3,quantity:12},{shape:3,color:2,quantity:12},{shape:2,color:3,quantity:12},{shape:4,color:4,quantity:12},{shape:4,color:4,quantity:12}],notifications:[],currentSelectedCards:[],answerCardList:[...Array(12)].fill({url:"",shape:"",card:"",isSelected:!1,isFoundPairs:!1,isEnabled:!1})}),computed:{currentLevelSetting(){return this.levelSetting[parseInt(this.level)-1]},foundPairsQuantity(){return this.answerCardList.filter(({isFoundPairs:t})=>t).length},isFinishCurrentLevel(){return this.foundPairsQuantity==this.answerCardList.length},isFinishAllLevel(){return 10==this.level&&this.isFinishCurrentLevel},displayLevel(){return this.level.toString().padStart(3,0)},displayScore(){return this.score.toString().padStart(3,0)},displayNameOfButton(){return this.isPlayingMode?"Replay":"Start"}},methods:{triggerGame(){this.isFinishAllLevel||(this.isPlayingMode?this.replayGame():this.playGame())},playGame(){this.level+=1,this.setAnswerOfLevel(),setTimeout(()=>{this.answerCardList.forEach(t=>t.isSelected=!0),setTimeout(()=>this.answerCardList.forEach(t=>t.isSelected=!1),4.5*this.timer),setTimeout(()=>this.isPlayingMode=!0,this.timer-200)},this.timer-400)},stopGame(){this.level=0,this.flop=0,this.score=0,this.isPlayingMode=!1},replayGame(){this.stopGame(),setTimeout(()=>this.playGame(),500)},pickCardUp(t){if(this.isPlayingMode){this.multiplyClickDetector(t);let e=this.answerCardList[t];const{isEnabled:i,isSelected:r,isFoundPairs:s}=e;!i||r||s||(this.flopTimes+=1,e.isSelected=!0,this.currentSelectedCards.push({...e,index:t}),this.foundPairsDetector())}},multiplyClickDetector(t){const e=this.answerCardList[t];e.isFoundPairs||(e.isEnabled=!0,setTimeout(()=>e.isEnabled=!1,this.timer))},foundPairsDetector(){const t=this.currentSelectedCards.length;t>1&&(t>2?(this.selectedCardDetector(),this.currentSelectedCards=[]):(this.scoreCalculator(),setTimeout(()=>this.currentSelectedCards=[],this.timer)))},scoreCalculator(){let t=!1;const e=this.currentSelectedCards[0],i=this.currentSelectedCards[1];(t=e.color==i.color&&e.shape==i.shape)&&this.notificationsAndScoreSetter(2),this.attributeOfSelectedCardSetter(t)},attributeOfSelectedCardSetter(t){const e=t?"isFoundPairs":"isSelected";this.currentSelectedCards.forEach(({index:i})=>{setTimeout(()=>this.answerCardList[i][e]=t,t?0:this.timer-200)}),setTimeout(()=>{this.isFinishCurrentLevel&&this.levelCalculator()},this.timer)},selectedCardDetector(){this.answerCardList.forEach(t=>{t.isFoundPairs||(t.isSelected=!1)})},foldBackCard(){this.answerCardList.forEach(t=>t.isSelected=!1)},levelCalculator(){this.isPlayingMode=!1,setTimeout(()=>this.bonusCalculator(),3*this.timer),this.isFinishAllLevel&&setTimeout(()=>this.foldBackCard(),2*this.timer),setTimeout(()=>this.triggerGame(),10*this.timer)},bonusCalculator(){const t=this.answerCardList.length;this.notificationsAndScoreSetter(this.flopTimes==t?5:this.flopTimes<1.5*t?3:1),this.flopTimes=0},notificationsAndScoreSetter(t){this.score+=t,this.notifications.push(t),setTimeout(()=>this.notifications.unshift(),3*this.timer)},setAnswerOfLevel(){const t=this.setCardGroup(this.currentLevelSetting),e=this.setAnswerCardGroup(t,this.currentLevelSetting);this.answerCardList=this.setAnswerCardList(e,this.currentLevelSetting)},setCardGroup({color:t,shape:e}){const i=this.getMaterialList(this.cardSetting.colors,t),r=this.getMaterialList(this.cardSetting.shapes,e);let s=[];return i.forEach(t=>r.forEach(e=>s.push({url:`${e}-${t}.svg`,shape:e,color:t,isSelected:!1,isFoundPairs:!1,isEnabled:!1}))),s},setAnswerCardGroup(t,{quantity:e}){return this.getShuffleArray(t.length,e/2).map(e=>t[e])},setAnswerCardList(t,{quantity:e}){const i=this.getFilledArray(e,t);return this.getShuffleArray(e,e).map(t=>({...i[t]}))},getFilledArray:(t,e)=>[...Array(t)].map((t,i)=>e[i%e.length]),getMaterialList(t,e){return this.getShuffleArray(4,e).map(e=>t[e])},getShuffleArray:(t,e)=>[...Array(t).keys()].sort(()=>.5-Math.random()).slice(0,e)}})}(Vue)},function(t,e,i){}]);